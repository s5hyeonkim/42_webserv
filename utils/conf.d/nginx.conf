# simple directive
# nginx 서버를 동작시킬 사용자.
# user nginx;
# 워커 프로세스 / 쓰레드 생성 개수 설정 (숫자 혹은 auto)
# worker_processes  auto;
# 로그 레벨 지시
# error_log  /var/log/nginx/error.log notice;
# nginx 마스터 프로세스 id 정보 저장
# pid			/var/run/nginx.pid;

# block directive
# 하나의 프로세스가 처리하는 worker connections 숫자
# events {
#     worker_connections  1024;
# }

http {
    #https://velog.io/@inwoo920/file-Upload-%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85oct-stream%EC%9D%B4-%EB%AD%94%EA%B0%80%EC%9A%94
    # octet stream 기반 http 사용한다는 지시어
    default_type  application/octet-stream;
    include       ../utils/mime.types;
    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';
    # access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    tcp_nopush     on;
    # if client use another http tansaction, instead of creation of tcp connection, we can use keep alive connecion on rest.
    # 접속 시 커넥션 유지 시간 지정.
    #keepalive_timeout  60;
    #keepalivetime 1h
    #keepaliverequests 1000 // max value of the number of work per keep alive connection
    #keepcacheconnectionalive 32 max keep alive connection of upstream server
    #gzip  on;
    client_body_timeout 60s;

    # for proxy server
    #clientmaxbodysize default x
    #connectTimeout default x
    #readTimeout default x
    #sendTimeout default x
    include       ../utils/conf.d/default.conf;
    # include /etc/nginx/conf.d/*.conf;
    # 하나의 웹사이트 선언하는데 사용. server 블록이 여러개면 한개의 머신이 여러 웹사이트를 서빙.
    server
    {
        client_body_timeout 39s;

        # 이 website가 바라보는 포트를 의미.
        listen 80;
        # 1개의 server directive는 있을 것.
        # 클라이언트가 접속하는 서버(주로 도메인). 실제 들어온 request의 header에 명시된 값이 일치하는지 확인해서 서버를 분기.
        server_name localhost;
        location /assets/ {
            root 42_frontend/dist;
            try_files $uri $uri/ = 404;
        }
        location / {

            root /home/nginx;
            index index.html;
        }
        location / {

            root /home/nginx;
            index index.html;
        }
    }
    server
    {
        # 이 website가 바라보는 주소를 의미. port 없으면 80
        # 1개의 server directive는 있을 것.
        # 클라이언트가 접속하는 서버(주로 도메인). 실제 들어온 request의 header에 명시된 값이 일치하는지 확인해서 서버를 분기.
        server_name localhost;
        location / {
            root /home/nginx;
            index index.html;
        }
        
    }
    
}